AWSTemplateFormatVersion: 2010-09-09
Description: |
  This Project Created for a 3 Layer DJango BLOG Page

Parameters:
  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Default: ziya

  CFHostedZoneId:
    Type: String
    Default: Z2FDTNDATAQYW2

  S3HostedZoneId:
    Type: String
    Default: Z3AQBSTGFYJSTF

  IAMRoleLambda:
    Type: String
    Default: arn:aws:iam::621627302500:role/LambdaAutoScaling

Resources:

# ------------------------------------------
# ------- VPC & SUBNET CONFIGURATIONS ------
# ------------------------------------------

  BlogVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.10.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: BlogVPC
  
  BlogPublicSubnet1A:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref BlogVPC
      AvailabilityZone: us-east-1a
      CidrBlock: 10.10.10.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: BlogPublicSubnet1A

  BlogPrivateSubnet1A:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref BlogVPC
      AvailabilityZone: us-east-1a
      CidrBlock: 10.10.11.0/24
      Tags:
        - Key: Name
          Value: BlogPrivateSubnet1A

  BlogPublicSubnet1B:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref BlogVPC
      AvailabilityZone: us-east-1b
      CidrBlock: 10.10.20.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: BlogPublicSubnet1B

  BlogPrivateSubnet1B:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref BlogVPC
      AvailabilityZone: us-east-1b
      CidrBlock: 10.10.21.0/24
      Tags:
        - Key: Name
          Value: BlogPrivateSubnet1B

  BlogInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: Blog-IGW

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref BlogVPC
      InternetGatewayId: !Ref BlogInternetGateway

  BlogPublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref BlogVPC
      Tags:
        - Key: Name
          Value: BlogPublicRouteTable

  BlogPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref BlogPublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref BlogInternetGateway

  BlogPrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref BlogVPC
      Tags:
        - Key: Name
          Value: BlogPrivateRouteTable

  BlogPublicRouteTableAssociation1A:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref BlogPublicSubnet1A
      RouteTableId: !Ref BlogPublicRouteTable

  BlogPublicRouteTableAssociation1B:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref BlogPublicSubnet1B
      RouteTableId: !Ref BlogPublicRouteTable

  BlogPrivateRouteTableAssociation1A:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref BlogPrivateSubnet1A
      RouteTableId: !Ref BlogPrivateRouteTable

  BlogPrivateRouteTableAssociation1B:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref BlogPrivateSubnet1B
      RouteTableId: !Ref BlogPrivateRouteTable

  NATRouteforPrivate:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref BlogPrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      InstanceId: !Ref NATIns

  VPCEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref BlogVPC
      ServiceName: com.amazonaws.us-east-1.s3
      VpcEndpointType: Gateway
      RouteTableIds:
        - !Ref BlogPrivateRouteTable

# ------------------------------------------
# --------- SEC GRP CONFIGURATIONS ---------
# ------------------------------------------

  ALBSecGrp:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: 80 - 443
      GroupName: ALBSecGrp
      SecurityGroupIngress: 
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      VpcId: !Ref BlogVPC

  NATSecGrp:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: 22 - 80 - 443
      GroupName: NATSecGrp
      SecurityGroupIngress: 
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      VpcId: !Ref BlogVPC

  EC2SecGrp:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: 22 - ALBONLY(80 - 443)
      GroupName: EC2SecGrp
      SecurityGroupIngress: 
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref ALBSecGrp  
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          SourceSecurityGroupId: !Ref ALBSecGrp  
      VpcId: !Ref BlogVPC

  RDSSecGrp:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable MySQL access
      GroupName: RDSSecGrp
      VpcId: !Ref BlogVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !Ref EC2SecGrp  

# # ------------------------------------------
# # --- RDS & S3 & DYNAMODB CONFIGURATIONS ---
# # ------------------------------------------

  DBSubnetGrp:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnet group for RDS
      SubnetIds:
        - !Ref BlogPrivateSubnet1A
        - !Ref BlogPrivateSubnet1B

  BlogRDS:
    Type: 'AWS::RDS::DBInstance'
    Properties:
      DBInstanceIdentifier: rds
      Engine: mysql
      EngineVersion: 8.0.28
      DBInstanceClass: db.t2.micro
      MasterUsername: admin
      MasterUserPassword: Admin12345
      AllocatedStorage: 20
      DBSubnetGroupName: !Ref DBSubnetGrp
      MultiAZ: false
      VPCSecurityGroups: 
        - !Ref RDSSecGrp
      DBName: rds
      AutoMinorVersionUpgrade: false

  S3ForMedia:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: djangoblogs3bucket
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        IgnorePublicAcls: false
        BlockPublicPolicy: false
        RestrictPublicBuckets: false

  S3Failover:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: blog.zasici.com
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        IgnorePublicAcls: false
        BlockPublicPolicy: false
        RestrictPublicBuckets: false
      WebsiteConfiguration:
        IndexDocument: index.html

  DynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Django-Blog
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

# ------------------------------------------
# ----------- NAT CONFIGURATIONS -----------
# ------------------------------------------

  NATIns:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-037eb9e678c1a8ed9
      InstanceType: t2.micro
      KeyName: !Ref KeyName
      SecurityGroupIds:
        - !Ref NATSecGrp
      SubnetId: !Ref BlogPublicSubnet1A
      SourceDestCheck: false
      Tags: 
        - Key: 'Name'
          Value: 'NATIns'

# ------------------------------------------
# ----------- IAM CONFIGURATIONS -----------
# ------------------------------------------

  BlogEC2S3FullAccessRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      RoleName: Blog_EC2_S3_Full_Access
      Description: IAM role for EC2 instances with full access to S3

  BlogEC2S3FullAccessPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: BlogEC2S3FullAccessPolicy
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action: 
              - s3:*
            Resource: "*"
      Roles:
        - Ref: BlogEC2S3FullAccessRole

# ------------------------------------------
# ----- LAUNCH TEMPLATE CONFIGURATIONS -----
# ------------------------------------------

  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        ImageId: ami-06aa3f7caf3a30282
        InstanceType: t2.micro
        KeyName: !Ref KeyName
        SecurityGroupIds:
          - !Ref EC2SecGrp
        IamInstanceProfile:
          Arn: !GetAtt InstanceProfile.Arn
        UserData: !Base64 |
          #!/bin/bash
          apt-get update -y
          apt-get upgrade -y
          apt-get install git -y
          apt-get install python3 python3-pip python3-venv -y
          apt-get install python3.8-dev default-libmysqlclient-dev -y
          cd /home/ubuntu/
          TOKEN=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
          git clone https://$TOKEN@github.com/ziyaasici/AWS-Project.git
          python3 -m venv venv
          source venv/bin/activate
          cd /home/ubuntu/AWS-Project/BlogDjango
          pip3 install -r requirements.txt
          cd /home/ubuntu/AWS-Project/BlogDjango/src
          python3 manage.py makemigrations
          python3 manage.py migrate
          python3 manage.py runserver 0.0.0.0:80
      LaunchTemplateName: LaunchTemplate
      VersionDescription: 'v1'

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref BlogEC2S3FullAccessRole

# ------------------------------------------
# ------- LOADBALANCER CONFIGURATIONS ------
# ------------------------------------------

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      SecurityGroups:
        - !Ref ALBSecGrp
      Scheme: internet-facing
      Subnets: 
        - !Ref BlogPublicSubnet1A
        - !Ref BlogPublicSubnet1B
      Type: application
      Tags: 
        - Key: 'Name'
          Value: 'LoadBalancer'
  
  HTTPListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGrp
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP

  HTTPSListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGrp
      LoadBalancerArn: !Ref LoadBalancer
      Port: 443
      Protocol: HTTPS
      Certificates:
           - CertificateArn: arn:aws:acm:us-east-1:621627302500:certificate/146ad63e-1914-4958-b35f-69b1b0a031f0

  TargetGrp:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 25
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 5
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 10
      VpcId: !Ref BlogVPC
      Tags: 
        - Key: 'Name'
          Value: 'TargetGrp'

# ------------------------------------------
# ------- AUTO SCALING CONFIGURATIONS ------
# ------------------------------------------

  AutoScaling:
    Type: AWS::AutoScaling::AutoScalingGroup
    DependsOn: BlogRDS
    Properties:
      DesiredCapacity: "2"
      HealthCheckGracePeriod: 300
      HealthCheckType: ELB
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplate
        Version: !GetAtt LaunchTemplate.LatestVersionNumber
      MaxSize: "4" # Required
      MinSize: "1" # Required
      VPCZoneIdentifier: [!Ref BlogPrivateSubnet1A, !Ref BlogPrivateSubnet1B]
      TargetGroupARNs:
        - !Ref TargetGrp
      Tags: 
        - Key: 'Name'
          Value: 'AutoScaling'
          PropagateAtLaunch: true

# # ------------------------------------------
# # -- CLOUDFRONT & ROUTE53 CONFIGURATIONS ---
# # ------------------------------------------
  
  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        HttpVersion: http2 
        Origins:
          - DomainName: !GetAtt LoadBalancer.DNSName  
            Id: BlogLoadBalancer
            CustomOriginConfig:
              HTTPPort: 80
              HTTPSPort: 443
              OriginProtocolPolicy: http-only
              OriginSSLProtocols:
                - TLSv1.2 
        DefaultCacheBehavior:
          TargetOriginId: BlogLoadBalancer
          ViewerProtocolPolicy: redirect-to-https
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: none
          AllowedMethods:
            - GET
            - HEAD
          Compress: true
          CachePolicyId: "658327ea-f89d-4fab-a63d-7e88639e58f6"  
        Enabled: true
        Aliases:
          - blog.zasici.com  
        ViewerCertificate:
          AcmCertificateArn: "arn:aws:acm:us-east-1:621627302500:certificate/146ad63e-1914-4958-b35f-69b1b0a031f0"  
          SslSupportMethod: sni-only 
          MinimumProtocolVersion: TLSv1.2_2021 
        Comment: CloudFront Distribution for Blog Application

  PrimaryHealthCheck:
    Type: AWS::Route53::HealthCheck
    Properties:
      HealthCheckConfig:
        Type: HTTP
        ResourcePath: / 
        FullyQualifiedDomainName: blog.zasici.com 
        RequestInterval: 30  
        FailureThreshold: 3  
      HealthCheckTags:
        - Key: Name
          Value: blog.zasici.com 

  Route53RecordSetGroup:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneName: zasici.com.
      RecordSets:
        - Name: blog.zasici.com.
          Type: A
          AliasTarget:
            HostedZoneId: !Ref CFHostedZoneId
            DNSName: !GetAtt CloudFrontDistribution.DomainName
            EvaluateTargetHealth: false
          SetIdentifier: CloudFrontPrimary
          Failover: PRIMARY
          HealthCheckId: !Ref PrimaryHealthCheck
        - Name: blog.zasici.com.
          Type: A
          AliasTarget:
            HostedZoneId: !Ref S3HostedZoneId
            DNSName: s3-website-us-east-1.amazonaws.com.
            EvaluateTargetHealth: false
          SetIdentifier: S3Failover
          Failover: SECONDARY

# # ------------------------------------------
# # --------- LAMBDA CONFIGURATIONS ----------
# # ------------------------------------------

  LambdatoDynamoDB:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.lambda_handler
      Role: !Ref IAMRoleLambda
      Code:
        ZipFile: |
          import json
          import boto3

          def lambda_handler(event, context):
              s3 = boto3.client("s3")
              
              if event:
                  print("Event: ", event)
                  filename = str(event['Records'][0]['s3']['object']['key'])
                  timestamp = str(event['Records'][0]['eventTime'])
                  event_name = str(event['Records'][0]['eventName']).split(':')[0][6:]
                  
                  filename1 = filename.split('/')
                  filename2 = filename1[-1]
                  
                  dynamo_db = boto3.resource('dynamodb')
                  dynamoTable = dynamo_db.Table('Django-Blog') 
                  
                  dynamoTable.put_item(Item = {
                      'id': filename2,
                      'timestamp': timestamp,
                      'Event': event_name,
                  })
                  
              return "Lambda success"
      Runtime: python3.12

  S3BucketEventPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt LambdatoDynamoDB.Arn
      Principal: s3.amazonaws.com
      SourceArn: !GetAtt S3ForMedia.Arn
